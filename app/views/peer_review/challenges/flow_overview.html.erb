<div class="row">
  <legend>Distribución de Revisiones</legend>
  <div class="col-md-6">
  <div id="teacher_reviews_chart"></div>
  </div>
  <div class="col-md-6">
    <div id="student_reviews_chart"></div>
  </div>
</div>

<div class="row">
  <legend>Flujo de revisiones</legend>
  <div class="col-md-12">
    <div id="flow_chart" style="text-align: center"></div>
  </div>
</div>


<% content_for :head do %>
  <style>

    #circle circle {
      fill: none;
      pointer-events: all;
    }

    .group path {
      fill-opacity: .5;
    }

    path.chord {
      stroke: #000;
      stroke-width: .25px;
    }

    #circle:hover path.fade {
      display: none;
    }

  </style>
<% end %>

<script src="//d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="//d3js.org/queue.v1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.22/c3.min.js"></script>
<script>

  // make it "responsive"?
    var width = 720,
        height = 720,
        outerRadius = Math.min(width, height) / 2 - 10,
        innerRadius = outerRadius - 24;

    var arc = d3.svg.arc()
        .innerRadius(innerRadius)
        .outerRadius(outerRadius);

    var layout = d3.layout.chord()
        .padding(.04)
        .sortSubgroups(d3.descending)
        .sortChords(d3.ascending);

    var path = d3.svg.chord()
        .radius(innerRadius);

    // ubicar el chart
    var svg = d3.select("#flow_chart").append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("id", "circle")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    svg.append("circle")
        .attr("r", outerRadius);

    var members = <%== @flow_overview.reviewers.to_json %>;
    var matrix = <%== @flow_overview.matrix.to_json %>;
    ready(members, matrix);

    function ready(members, matrix) {
        // Compute the chord layout.
        layout.matrix(matrix);

        // Add a group per member.
        var group = svg.selectAll(".group")
            .data(layout.groups)
            .enter().append("g")
            .attr("class", "group")
            .on("mouseover", mouseover);

        // Add a mouseover title.
        group.append("title").text(function (d, i) {
            return members[i].name + ": " + d.value + " revisiones";
        });

        // Add the group arc.
        var groupPath = group.append("path")
            .attr("id", function (d, i) {
                return "group" + i;
            })
            .attr("d", arc)
            .style("fill", function (d, i) {
                return members[i].color;
            });

        // Add a text label.
        var groupText = group.append("text")
            .attr("x", 6)
            .attr("dy", 15);

        groupText.append("textPath")
            .attr("xlink:href", function (d, i) {
                return "#group" + i;
            })
            .text(function (d, i) {
                return members[i].name;
            });

        // Remove the labels that don't fit. :(
        groupText.filter(function (d, i) {
            return groupPath[0][i].getTotalLength() / 2 - 16 < this.getComputedTextLength();
        })
            .remove();

        // Add the chords.
        var chord = svg.selectAll(".chord")
            .data(layout.chords)
            .enter().append("path")
            .attr("class", "chord")
            .style("fill", function (d) {
                return members[d.source.index].color;
            })
            .attr("d", path);

        // Add an elaborate mouseover title for each chord.
        chord.append("title").text(function (d) {
            return members[d.source.index].name
                + " → " + members[d.target.index].name
                + ": " + d.source.value
                + "\n" + members[d.target.index].name
                + " → " + members[d.source.index].name
                + ": " + d.target.value;
        });

        function mouseover(d, i) {
            chord.classed("fade", function (p) {
                return p.source.index != i
                    && p.target.index != i;
            });
        }
    }




  c3.generate({
      bindto: "#teacher_reviews_chart",
      data: {
          columns: <%== @flow_overview.teacher_reviews.to_json %>,
          type : 'donut'
      },
      donut: {
          title: "Docentes"
      }
  });

  c3.generate({
      bindto: "#student_reviews_chart",
      data: {
          columns: <%== @flow_overview.student_reviews.to_json %>,
          type : 'donut'
      },
      donut: {
          title: "Estudiantes"
      }
  });


</script>

